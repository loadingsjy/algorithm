异或运算性质:
1）异或运算就是无进位相加
2）异或运算满足交换律、结合律，也就是同一批数字，不管异或顺序是什么，最终的结果都是一个
3）0^n=n，n^n=0
4）整体异或和如果是x，整体中某个部分的异或和如果是y，那么剩下部分的异或和是x^y

这些结论最重要的就是1）结论，所有其他结论都可以由这个结论推论得到

其中第4）相关的题目最多，利用区间上异或和的性质

Nim博弈也是和异或运算相关的算法，将在后续【必备】课程里讲到

-------------------------------------------------------------------------------------------

特别提醒：Python的同学实现位运算的题目需要特别注意，需要自己去手动处理溢出和符号扩展等问题
比如：(n << shift_amount) & 0xFFFFFFFF

位运算有很多奇技淫巧，位运算的速度非常快，仅次于赋值操作，常数时间极好！

这节课展示一下先贤的功力！骚就完了！

关于位运算还有非常重要的内容：
N皇后问题用位运算实现，将在【必备】课程里讲到
状态压缩的动态规划，将在【扩展】课程里讲到

-------------------------------------------------------------------------------------------

位图原理:
其实就是用bit组成的数组来存放值，用bit状态1、0代表存在、不存在，取值和存值操作都用位运算
限制是必须为连续范围且不能过大。好处是极大的节省空间，因为1个数字只占用1个bit的空间。
位图的实现:
Bitset(int n)：初始化位图的大小，只支持0~n-1所有数字的增删改查
void add(int num)：把num加入到位图
void remove(int num)：把num从位图中删除
void reverse(int num)：如果位图里没有num，就加入；如果位图里有num，就删除
boolean contains(int num)：查询num是否在位图中
将采用对数器验证，当你找不到测试链接的时候就用对数器验证，而且对数器验证更稳妥、更能练习debug能力

