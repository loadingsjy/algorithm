滑动窗口：维持左、右边界都不回退的一段范围，来求解很多子数组（串）的相关问题
** 滑动窗口的关键：找到 范围 和 答案指标 之间的 单调性关系（类似贪心）
滑动过程：滑动窗口可以用 简单变量 或者 结构 来 维护信息
求解大流程：求子数组在 每个位置 开头 或 结尾 情况下的答案（开头还是结尾在于个人习惯）
注意：
滑动窗口维持最大值 或者 最小值的更新结构，在【必备】课程【单调队列】视频里讲述


** 滑动窗口题目一般都含有：最长/短，最大/小 等特征词

------------------------------------------------------------------------------

# 滑动窗口算法伪码框架
def slidingWindow(s: str):
    # 用合适的数据结构记录窗口中的数据，根据具体场景变通
    # 比如说，我想记录窗口中元素出现的次数，就用 map
    # 如果我想记录窗口中的元素和，就可以只用一个 int
    window = ...

    left, right = 0, 0
    while right < len(s):
        # c 是将移入窗口的字符
        c = s[right]
        window.add(c)
        # 增大窗口
        right += 1
        # 进行窗口内数据的一系列更新
        ...

        # *** debug 输出的位置 ***
        # 注意在最终的解法代码中不要 print
        # 因为 IO 操作很耗时，可能导致超时
        # print(f"window: [{left}, {right})")
        # ***********************

        # 判断左侧窗口是否要收缩
        while left < right and window needs shrink:
            # d 是将移出窗口的字符
            d = s[left]
            window.remove(d)
            # 缩小窗口
            left += 1
            # 进行窗口内数据的一系列更新
            ...

------------------------------------------------------------------------------

# 滑动窗口计数模板：
ans_left, ans_right = -1, len(s)
left = 0
cnt_s = Counter()  # s 子串字母的出现次数
cnt_t = Counter(t)  # t 中字母的出现次数

for right, c in enumerate(s):  # 移动子串右端点
    cnt_s[c] += 1  # 右端点字母移入子串
    while cnt_s >= cnt_t:  # 涵盖
        if right - left < ans_right - ans_left:  # 找到更短的子串
            ans_left, ans_right = left, right  # 记录此时的左右端点
        cnt_s[s[left]] -= 1  # 左端点字母移出子串
        left += 1  # 移动子串左端点
return "" if ans_left < 0 else s[ans_left : ans_right + 1]

------------------------------------------------------------------------------

# 滑动窗口模版
class Solution:
    def problemName(self, s: str) -> int:
        # Step 1: 定义需要维护的变量们 (对于滑动窗口类题目，这些变量通常是最小长度，最大长度，或者哈希表)
        x, y = ..., ...

        # Step 2: 定义窗口的首尾端 (start, end)， 然后滑动窗口
        start = 0
        for end in range(len(s)):
            # Step 3: 更新需要维护的变量, 有的变量需要一个if语句来维护 (比如最大最小长度)
            x = new_x
            if condition:
                y = new_y

            '''
            ------------- 下面是两种情况，读者请根据题意二选1 -------------
            '''
            # Step 4 - 情况1
            # 如果题目的窗口长度固定：用一个if语句判断一下当前窗口长度是否超过限定长度 
            # 如果超过了，窗口左指针前移一个单位保证窗口长度固定, 在那之前, 先更新Step 1定义的(部分或所有)维护变量 
            if 窗口长度大于限定值:
                # 更新 (部分或所有) 维护变量 
                # 窗口左指针前移一个单位保证窗口长度固定

            # Step 4 - 情况2
            # 如果题目的窗口长度可变: 这个时候一般涉及到窗口是否合法的问题
            # 如果当前窗口不合法时, 用一个while去不断移动窗口左指针, 从而剔除非法元素直到窗口再次合法
            # 在左指针移动之前更新Step 1定义的(部分或所有)维护变量 
            while 不合法:
                # 更新 (部分或所有) 维护变量 
                # 不断移动窗口左指针直到窗口再次合法

        # Step 5: 返回答案
        return ...

