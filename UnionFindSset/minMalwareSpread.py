#
# * 924. 尽量减少恶意软件的传播 - H

# 给出了一个由 n 个节点组成的网络，用 n × n 个邻接矩阵图 graph 表示。在节点网络中，当 graph[i][j] = 1 时，表示节点 i 能够直接连接到另一个节点 j。
# 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
# 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
# 如果从 initial 中移除某一节点能够最小化 M(initial)， 返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
# 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后仍有可能因恶意软件传播而受到感染。


# 示例 1：
# 输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
# 输出：0
# 示例 2：
# 输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
# 输出：0
# 示例 3：
# 输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
# 输出：1


# 提示：
# n == graph.length
# n == graph[i].length
# 2 <= n <= 300
# graph[i][j] == 0 或 1.
# graph[i][j] == graph[j][i]
# graph[i][i] == 1
# 1 <= initial.length <= n
# 0 <= initial[i] <= n - 1
# initial 中所有整数均不重复
from collections import defaultdict


class Solution:
    def minMalwareSpread(self, graph: list[list[int]], initial: list[int]) -> int:
        """
        1.除了感染源头以外的点，构建并查集（连通分量）
        2.对每个集合找到能感染整个集合的源头点
        3.对每个源头点计数，求出删掉该源头点能拯救的节点数量
        """
        n = len(graph)

        father = list(range(n))
        size = [1] * n  # 每个集合的大小(节点数量）
        # i所在的集合连接的感染源头编号(-2，代表连接多个 无效，-1代表没有，0...n-1代表连接的源头点编号)
        infect = [-1] * n

        # * 集合只放普通点，感染源头点更不不参与集合，也不是元素
        def find(i):
            if i != father[i]:
                father[i] = find(father[i])
            return father[i]

        def union(x, y):
            fx = find(x)
            fy = find(y)
            if fx != fy:
                father[fx] = fy
                size[fy] += size[fx]

        initial_set = set(initial)

        # 普通点合并
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1 and i not in initial_set and j not in initial_set:
                    union(i, j)
        # 为病毒源头点的周围普通点所在的集合 设置 源头
        for sick in initial:
            for neighboor in range(n):
                if (
                    sick != neighboor
                    and neighboor not in initial_set
                    and graph[sick][neighboor] == 1
                ):
                    fn = find(neighboor)
                    if infect[fn] == -1:
                        infect[fn] = sick
                    elif infect[fn] != -2 and infect[fn] != sick:
                        infect[fn] = -2

        save_cnts = [0] * n  # 下标：源头点编号  value: 删掉该源头点能拯救的节点数量
        # 计算 每个病毒源头点 可以 save 的节点数量
        for i in range(n):
            if i == find(i) and infect[i] >= 0:
                save_cnts[infect[i]] += size[i] + 1
        for i in initial:
            if sum(graph[i]) == 1:  # 感染点是孤立点
                save_cnts[i] = 1

        initial.sort()
        ans = initial[0]
        max_save = save_cnts[ans]
        for i in initial:
            if save_cnts[i] > max_save:
                ans = i
                max_save = save_cnts[i]
        return ans

    def minMalwareSpread(self, graph: list[list[int]], initial: list[int]) -> int:
        """求只包含一个被感染节点的最大连通块:
        1.遍历 initial 中的节点 x。
        2.如果 x 没有被访问过，那么从 x 开始 DFS，同时用一个 vis 数组标记访问过的节点。
        3.DFS 过程中，统计连通块的大小 size。
        4.DFS 过程中，记录访问到的在 initial 中的节点。
        5.DFS 结束后，如果发现该连通块只有一个在 initial 中的节点，并且该连通块的大小比最大的连通块更大，那么更新最大连通块的大小，以及答案节点 x。如果一样大，就更新答案节点的最小值。
        6.最后，如果没找到符合要求的节点，返回 min(initial)；否则返回答案节点。
        """
        st = set(initial)
        vis = [False] * len(graph)

        def dfs(x: int) -> None:
            vis[x] = True
            nonlocal node_id, size
            size += 1
            # 按照状态机更新 node_id
            if node_id != -2 and x in st:
                node_id = x if node_id == -1 else -2
            for y, conn in enumerate(graph[x]):
                if conn and not vis[y]:
                    dfs(y)

        ans = -1
        max_size = 0
        for x in initial:
            if vis[x]:
                continue
            node_id = -1
            size = 0
            dfs(x)
            if node_id >= 0 and (size > max_size or size == max_size and node_id < ans):
                ans = node_id
                max_size = size
        return min(initial) if ans < 0 else ans
