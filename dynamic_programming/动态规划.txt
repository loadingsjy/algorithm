动态规划：用空间代替重复计算，包含一整套原理和技巧的总和，课程会用非常大的篇幅来全盘介绍

知道怎么算的算法 vs 知道怎么试的算法

有些递归在展开计算时，总是重复调用同一个子问题的解，这种重复调用的递归变成动态规划很有收益
如果每次展开都是不同的解，或者重复调用的现象很少，那么没有改动态规划的必要
下节课会举例，哪些递归没有必要改动态规划的必要

任何动态规划问题都一定对应着一个有重复调用行为的递归
所以任何动态规划的题目都一定可以从递归入手，逐渐实现动态规划的方法
题目1到题目4，都从递归入手，逐渐改出动态规划的实现

尝试策略 就是 转移方程，完全一回事！
推荐从尝试入手，因为代码好写，并且一旦发现尝试错误，重新想别的递归代价轻！

------------------------------------------------------------------------------------

动态规划的大致过程：
想出设计优良的递归尝试(方法、经验、固定套路很多)，有关尝试展开顺序的说明
-> 记忆化搜索(从顶到底的动态规划) ，如果每个状态的计算枚举代价很低，往往到这里就可以了
-> 严格位置依赖的动态规划(从底到顶的动态规划) ，更多是为了下面说的 进一步优化枚举做的准备
-> 进一步优化空间（空间压缩），一维、二维、多维动态规划都存在这种优化
-> 进一步优化枚举也就是优化时间（本节没有涉及，但是后续巨多内容和这有关）

解决一个问题，可能有很多尝试方法
众多的尝试方法中，可能若干的尝试方法有重复调用的情况，可以转化成动态规划
若干个可以转化成动态规划的方法中，又可能有优劣之分
判定哪个是最优的动态规划方法，依据来自题目具体参数的数据量
最优的动态规划方法实现后，后续又有一整套的优化技巧

------------------------------------------------------------------------------------

一维、二维、三维甚至多维动态规划问题，大体过程都是：
写出尝试递归
记忆化搜索(从顶到底的动态规划)
严格位置依赖的动态规划(从底到顶的动态规划)
空间、时间的更多优化

------------------------------------------------------------------------------------

动态规划表的大小：每个可变参数的可能性数量相乘
动态规划方法的时间复杂度：动态规划表的大小 * 每个格子的枚举代价


二维动态规划依然需要去整理 动态规划表的格子之间的依赖关系
找寻依赖关系，往往 通过画图来建立空间感，使其更显而易见
然后依然是 从简单格子填写到复杂格子 的过程，即严格位置依赖的动态规划(从底到顶)


二维动态规划的压缩空间技巧原理不难，会了之后千篇一律
但是不同题目依赖关系不一样，需要 很细心的画图来整理具体题目的依赖关系
最后进行空间压缩的实现

------------------------------------------------------------------------------------

能改成动态规划的递归，统一特征：
决定返回值的可变参数类型往往都比较简单，一般不会比int类型更复杂。为什么？

从这个角度，可以解释 带路径的递归（可变参数类型复杂），不适合或者说没有必要改成动态规划

一定要 写出可变参数类型简单（不比int类型更复杂），并且 可以完全决定返回值的递归，
保证做到 这些可变参数可以完全代表之前决策过程对后续过程的影响！再去改动态规划！

不管几维动态规划
经常从递归的定义出发，避免后续进行很多边界讨论
这需要一定的经验来预知
